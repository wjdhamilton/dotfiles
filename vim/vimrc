" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Dec 17
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

source $HOME/custom-vim-scripts/stubtest.vim

"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

set backupdir=~/vimtmp,.
set directory=~/vimtmp,.

let mapleader = "\<Space>"

" ###################### Vundle Stuff ##################################
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'vim-scripts/visualrepeat'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'thoughtbot/vim-rspec'

" Tim Pope stuff
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'

Plugin 'christoomey/vim-tmux-navigator'
Plugin 'christoomey/vim-tmux-runner'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'othree/yajs.vim'
Plugin 'yorickpeterse/ruby-lint'
Plugin 'scrooloose/syntastic'
Plugin 'Shougo/vimproc.vim'
" Elm plugins
Plugin 'elmcast/elm-vim'
" Haskell Plugins
Plugin 'bitc/vim-hdevtools'
Plugin 'itchyny/vim-haskell-indent'
Plugin 'neovimhaskell/haskell-vim'
Plugin 'lukerandall/haskellmode-vim'
Plugin 'eagletmt/ghcmod-vim.git'
" Markdown
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'mattn/emmet-vim'
" Hspec code highlighting
Plugin 'hspec/hspec'
" Neo4j
Plugin 'neo4j-contrib/cypher-vim-syntax'
" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" :PluginUpdate     - updates the currently installed plugins
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
" ############### Vim-Tmux-Runner for RSpec ###############################

let g:rspec_command = "VtrSendCommandToRunner! rspec {spec}"

" #################### Ctrl-P #####################################

" Make CtrlP use ag for listing the files. Much faster and no useless files.
let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
let g:ctrlp_use_caching = 0

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Allow matching between do/def/if etc and end
runtime macros/matchit.vim

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Set line numbers to always be visible
set number
" And use jj to enter insert mode
inoremap jk <Esc>l
" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

set expandtab
set tabstop=2
set shiftwidth=2
" Always display statusline
set laststatus=2
"Leader mappings
" run rake for testing
nmap <leader>r :!rake<CR>
" Reindent file and return to current position
nmap <leader>i mmgg=G`m
" Switch off search highlighting
nmap <leader>n :noh<CR>
" Run Rspec all tests in the file
nmap <leader>rsf :call RunCurrentSpecFile()<CR>
" Run Rspec specific test
nmap <leader>rst :call RunNearestSpec()<CR>
" Run Rspec last spec
nmap <leader>rsl :call RunLastSpec()<CR>
" Run all tests
nmap <leader>rs :call RunAllSpecs()<CR>
" Replace all single quotes with doubles 
nmap <leader>"" :%s/'/"/g<Bar>:noh<CR>
" Move with <Space> rather than gg
nmap <leader><leader> gg
" Source vimRC
nmap <leader>sc :source $MYVIMRC<CR>
" Insert a command to byebug
nmap <leader>bb O byebug jk :w<CR>
" Stub a test
nmap <leader>it :call WriteSpec()<CR>


" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<CR>:wincmd \|<CR>
noremap  <buffer> <silent> k gk
noremap  <buffer> <silent> j gj
noremap  <buffer> <silent> 0 g0
noremap  <buffer> <silent> $ g$
nnoremap <leader>= :wincmd =<CR>
" Go back to the last file edited
nmap <leader>c :e#<CR>


" Syntastic Stuff Removed because it removed  the edited indicator and line
" numbers from status bar
 " set statusline+=%#warningmsg#
 " set statusline+=%{SyntasticStatuslineFlag()}
 " set statusline+=%*

 " The elm-vim plugin's syntastic implementation is problematic switch it off
 " until the plugin has been improved
 let g:syntastic_mode_map = {
  \ "mode": "active",
  \ "passive_filetypes": ["elm", "haskell"] }

 let g:syntastic_always_populate_loc_list = 1
 let g:syntastic_auto_loc_list = 0
 let g:syntastic_check_on_open = 1
 let g:syntastic_check_on_wq = 0
 
 " let g:elm_syntastic_show_warnings = 1

" HDevTools
" au FileType haskell nnoremap <buffer> <leader>ht :HdevtoolsType<CR>
" au FileType haskell nmap <buffer> <silent> <leader>hc :HdevtoolsClear<CR> 

" Haskellmode-vim
au BufEnter *.hs compiler ghc
let g:haddock_browser="open"

" ghc mod
let $PATH = $PATH . ':' . expand('~/.local/bin')

" ghc-mod code completion
map <silent>tw :GhcModTypeInsert<CR>
map <silent>ts :GhcModSplitFunCase<CR>
map <silent>tq :GhcModType<CR>
map <silent>te :GhcModTypeClear<CR>
nmap <leader>ht :GhcModCheck<CR>
nmap <leader>hl :GhcModLint<CR>
nmap <leader>hg :GhcModSigCodegen<CR>
nmap <leader>w gqq

" Emmet
" let g:user_emmet_install_global = 0
" autocmd FileType html,css,html.erb EmmetInstall

" Set max cols on markdown to 80
au BufRead,BufNewFile *.md setlocal textwidth=80

" Make it obvious where 80 characters is
set colorcolumn=81

" Numbers
set number
set numberwidth=5

" Use system clipboard
set clipboard=unnamed

" Use relativeNumber

set relativenumber
autocmd InsertEnter * :set number norelativenumber
autocmd InsertLeave * :set relativenumber 

"Override ignorecase if a pattern contains an upcase
set ignorecase
set smartcase

"Make panes auto-focus so that the active window always occupies the majority
" of the space
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999

set splitbelow
set splitright

let g:user_emmet_install_global = 0
let g:user_emmet_leader_key='<C-d>'
autocmd FileType html,css EmmetInstall

" Repeat : commands with one button
map , @:
